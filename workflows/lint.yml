name: Code Quality & Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # JavaScript/TypeScript Linting
  javascript-lint:
    name: JavaScript/TypeScript Lint
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[js]') || contains(github.event.head_commit.message, '[ts]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci --legacy-peer-deps
    
    - name: ESLint Check
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json
        npx eslint . --ext .js,.jsx,.ts,.tsx
    
    - name: Prettier Check
      run: |
        npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
    
    - name: TypeScript Check
      run: |
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        fi
    
    - name: Upload ESLint Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json

  # Python Code Quality
  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[python]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy bandit pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Black Code Formatting Check
      run: |
        black --check --diff .
    
    - name: isort Import Sorting Check
      run: |
        isort --check-only --diff .
    
    - name: Flake8 Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --format=json --output-file=flake8-report.json
    
    - name: MyPy Type Checking
      run: |
        mypy . --ignore-missing-imports --json-report mypy-report
      continue-on-error: true
    
    - name: Pylint Code Analysis
      run: |
        pylint **/*.py --output-format=json --reports=no > pylint-report.json
      continue-on-error: true
    
    - name: Bandit Security Linting
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Python Lint Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-lint-reports
        path: |
          flake8-report.json
          mypy-report/
          pylint-report.json
          bandit-report.json

  # .NET Code Quality
  dotnet-lint:
    name: .NET Code Quality
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[dotnet]') || contains(github.event.head_commit.message, '[csharp]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore Dependencies
      run: dotnet restore
    
    - name: .NET Format Check
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Build with Code Analysis
      run: |
        dotnet build --configuration Release --verbosity normal /p:TreatWarningsAsErrors=true /p:WarningsAsErrors="" /p:WarningsNotAsErrors="CS1591"
    
    - name: Run .NET Analyzers
      run: |
        dotnet build --configuration Release --verbosity normal /p:RunAnalyzersDuringBuild=true

  # SQL Linting (PostgreSQL)
  sql-lint:
    name: SQL Code Quality
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[sql]') || contains(github.event.head_commit.message, '[database]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (for sql-lint)
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install SQL Linter
      run: |
        npm install -g sql-lint
    
    - name: Lint SQL Files
      run: |
        find . -name "*.sql" -type f -exec sql-lint {} \;
      continue-on-error: true

  # Markdown and Documentation Linting
  documentation-lint:
    name: Documentation Quality
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[docs]') || contains(github.event.head_commit.message, '[md]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install Markdown Linter
      run: |
        npm install -g markdownlint-cli
    
    - name: Lint Markdown Files
      run: |
        markdownlint "**/*.md" --ignore node_modules --ignore .github
    
    - name: Check Links in Markdown
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/workflows/markdown-link-check-config.json'
      continue-on-error: true

  # YAML Linting
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[yaml]') || contains(github.event.head_commit.message, '[yml]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install yamllint
      run: |
        pip install yamllint
    
    - name: Lint YAML Files
      run: |
        yamllint .

  # Docker Linting
  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[docker]') || contains(github.event.head_commit.message, '[dockerfile]') || contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Lint Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "**/Dockerfile*"
        recursive: true

  # SonarQube Analysis
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Code Quality Summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [javascript-lint, python-lint, dotnet-lint, sql-lint, documentation-lint, yaml-lint, docker-lint]
    if: always()
    
    steps:
    - name: Check Quality Gate Status
      run: |
        if [[ "${{ needs.javascript-lint.result }}" == "failure" || "${{ needs.python-lint.result }}" == "failure" || "${{ needs.dotnet-lint.result }}" == "failure" ]]; then
          echo "❌ Code quality checks failed!"
          echo "Please fix linting issues before merging."
          exit 1
        else
          echo "✅ All code quality checks passed!"
        fi
    
    - name: Quality Summary
      run: |
        echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| JavaScript/TypeScript | ${{ needs.javascript-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python | ${{ needs.python-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| .NET | ${{ needs.dotnet-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SQL | ${{ needs.sql-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| YAML | ${{ needs.yaml-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker-lint.result }} |" >> $GITHUB_STEP_SUMMARY
