name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'
  DOTNET_VERSION: '9.0.x'

jobs:
  # JavaScript/TypeScript Projects
  javascript-ci:
    name: JavaScript/TypeScript CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[js]') || contains(github.event.head_commit.message, '[ts]') || contains(github.event.head_commit.message, '[node]') || contains(github.event.head_commit.message, '[react]') || contains(github.event.head_commit.message, '[next]') || contains(github.event.head_commit.message, '[angular]')
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm ci --legacy-peer-deps
    
    - name: Lint Code
      run: |
        npm run lint
        npm run lint:fix
    
    - name: Type Check (TypeScript)
      run: |
        if [ -f "tsconfig.json" ]; then
          npm run type-check
        fi
    
    - name: Run Unit Tests
      run: |
        npm run test:coverage
    
    - name: Run Integration Tests
      run: |
        npm run test:integration
      env:
        NODE_ENV: test
    
    - name: Build Application
      run: |
        npm run build
    
    - name: Upload Test Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: javascript-coverage

  # Python Projects
  python-ci:
    name: Python CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[python]') || contains(github.event.head_commit.message, '[flask]') || contains(github.event.head_commit.message, '[django]')
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with Black
      run: |
        black --check --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type Check with mypy
      run: |
        mypy .
    
    - name: Security Check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
    
    - name: Run Tests with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        ENVIRONMENT: test
    
    - name: Upload Test Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  # .NET Projects
  dotnet-ci:
    name: .NET CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[dotnet]') || contains(github.event.head_commit.message, '[csharp]') || contains(github.event.head_commit.message, '[aspnet]')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore Dependencies
      run: dotnet restore
    
    - name: Build Solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run Unit Tests
      run: dotnet test --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"
    
    - name: Generate Code Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coverage" -reporttypes:"Html;Cobertura"
    
    - name: Upload Test Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/Cobertura.xml
        flags: dotnet
        name: dotnet-coverage

  # Database Tests
  database-ci:
    name: Database CI
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[db]') || contains(github.event.head_commit.message, '[database]') || contains(github.event.head_commit.message, '[postgres]')
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Run Database Migrations
      run: |
        # Add your database migration scripts here
        echo "Running database migrations..."
    
    - name: Run Database Tests
      run: |
        # Add your database test scripts here
        echo "Running database tests..."
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Notify on Completion
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [javascript-ci, python-ci, dotnet-ci, database-ci, security-scan, dependency-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.javascript-ci.result == 'success' || needs.python-ci.result == 'success' || needs.dotnet-ci.result == 'success'
      run: |
        echo "CI Pipeline completed successfully!"
        # Add notification to team channels if needed
    
    - name: Notify Failure
      if: failure()
      run: |
        echo "CI Pipeline failed! Please check the logs."
        # Add failure notification logic here
